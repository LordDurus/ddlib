'$INCLUDE:'.\constants.bi'
'$INCLUDE:'.\file.bm'
'$INCLUDE:'.\path.bm'
'$INCLUDE:'.\string.bm'

$if ddlibDirectory = undefined then
$let ddlibDirectory = define

' ----------------------------------------------------------------------------
' #### Determines whether the given path refers to an existing directory on disk.
'___
' - @param {string} path The path to test
function directory.Exists(path as string)
	if _direxists(path) then
		directory.Exists = boolean.TRUE
	else
		directory.Exists = boolean.FALSE
	end if
end function
' ----------------------------------------------------------------------------
' #### Creates a new folder (directory) at a specified path.
'___
' - @param {string} path The directory to create.
function directory.CreateDirectory(path as string)
	if not directory.Exists(path) then
		mkdir path
	end if
	directory.CreateDirectory = directory.Exists(path)
end function
' ----------------------------------------------------------------------------
' #### Deletes an empty directory using a designated path relative to the present path location.
'___
' - @param {string} path The directory to delete.
sub directory.Delete(path as string)
	if directory.Exists(path) then
		rmdir path
	end if
end sub
' ----------------------------------------------------------------------------
' #### Returns the names of files in the given search command
'___
' - @param {string} searchCommand Any valid ls or dir command. Must in include the /b (or Linux/MacOs equivalent)
'
' \* denotes one or more wildcard characters in a filename or path specification as any legal file name character(s).
'
' ? denotes one wildcard letter in a filename or path specification as any legal filename character.
'
' - @param {string array} Array to put files in
' - @param {integer} includeSubFolders (-1 true | 0 false)
sub directory.Search(searchCommand as string, fileArray() as string)
	if instr(_os$,"[WINDOWS]") > 0 then
		if not string.StartsWith(lcase$(searchCommand), "dir") then
			error 75
		end if
	else
		if not string.StartsWith(lcase$(searchCommand), "ls") then
			error 75
		end if
	end if
	call directory.Interal_LoadFileArray(searchCommand, fileArray())
end sub
' ----------------------------------------------------------------------------
' #### Returns the names of files in the given path
'___
' - @param {string} path Search path.
' - @param {string array} Array to put files in
' - @param {integer} includeSubFolders (-1 true | 0 false)
sub directory.GetFiles(path as string, fileArray() as string, includeSubFolders as integer)
	
	dim shellCommand as string : shellCommand = string.EMPTY
	if instr(_os$,"[WINDOWS]") > 0 then
		if includeSubFolders = boolean.TRUE then
			shellCommand = "dir " + path.AddSlash(path) + "*.* /on/s/b/d/a-d"
		else
			shellCommand = "dir " + path.AddSlash(path) + "*.* /on/b/d/a-d"
		end if
	else
		if includeSubFolders = boolean.TRUE then
			shellCommand = "ls -l --sort=timname --color=always --time-style=long-iso --recursive --all --file " + path
		else
			shellCommand = "ls -l --sort=timname --color=always --time-style=long-iso --all --file " + path
		end if
	end if
	
	call directory.Interal_LoadFileArray(shellCommand, fileArray())
	
end sub
' ----------------------------------------------------------------------------
' #### Returns the names of folders in the given path
'___
' - @param {string} path Search path.
' - @param {string array} Array to put files in
' - @param {integer} includeSubFolders (-1 true | 0 false)
sub directory.GetFolders(path as string, fileArray() as string, includeSubFolders as integer)
	
	dim shellCommand as string : shellCommand = string.EMPTY
	if instr(_os$,"[WINDOWS]") > 0 then
		if includeSubFolders = boolean.TRUE then
			shellCommand = "dir " + path.AddSlash(path$) + "*.* /on/b/s/AD"
		else
			shellCommand = "dir " + path.AddSlash(path$) + "*.* /on/b/AD"
		end if
	else
		if includeSubFolders = boolean.TRUE then
			shellCommand = "ls -l --sort=name --color=always --time-style=long-iso --group-directories-first --recursive --all --directory " + path
		else
			shellCommand = "ls -l --sort=name --color=always --time-style=long-iso --group-directories-first --all --directory " + path
		end if
	end if
	
	call directory.Interal_LoadFileArray(shellCommand, fileArray())
	
end sub
' ----------------------------------------------------------------------------
' Interal sub to load a temp file with files or folders the read the file.
' - @param {string} shellCommand The command to run to create a file with the list of files.
' - @param {string array} fileArray String array to put the list of files in.
sub directory.Interal_LoadFileArray(shellCommand as string, fileArray() as string)
	
	redim	fileArray(1 to 0)
	if shellCommand = string.EMPTY then
		exit sub
	end if
	
	dim listMAX as integer : listMAX = 2000 'change maximum to suit your needs
	dim tmpfile as string : tmpfile = "ddlib-dir$inf" + ltrim$(str$(rnd)) + ".tmp"
	if instr(_os$,"[WINDOWS]") > 0 then
		shell _hide shellCommand + " > " + tmpfile
	else
		shell _hide shellCommand + " < " + tmpfile
	end if
	
	if file.GetSize(tmpfile) = long.EMPTY then
		redim	fileArray(1 to 0)
		kill tmpfile
		exit sub
	end if
	
	dim fileHandle as long : fileHandle = file.OpenInput(tmpfile)
	dim count as integer : count = 0
	redim fileArray(listMAX)
	do while not eof(fileHandle) and count < listMAX
		count = count + 1
		input #fileHandle, fileArray(count)
	loop
	
	redim _preserve fileArray(count)
	if file.Close(fileHandle) then
		file.Delete(tmpfile)
	end if
	
end sub

$end if