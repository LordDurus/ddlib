
'$INCLUDE:'.\constants.bi'

$if ddlibfile = undefined then
$let ddlibfile = defined

' ----------------------------------------------------------------------------
' #### Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
'___
' - @param {string} path The file to write to.
' - @param {string} contents The string to write to the file.
sub file.WriteAllText(path as string, contents as string)
	dim filehandle as integer : filehandle = freefile : open path for output as #filehandle
	print #filehandle, contents
	close #filehandle
end sub
' ----------------------------------------------------------------------------
' #### Append a new line file
' - @param {string} path The file to write to.
' - @param {string} contents The string to write to the file.
sub file.AppendLine(path as string, contents as string)
	dim filehandle as integer : filehandle = freefile : open path for append as #filehandle
	print #filehandle, contents
	close #filehandle
end sub
' ----------------------------------------------------------------------------
' #### Determines whether the specified file exists.
'___
' - @param {string} filepath The file to check.
' - @return Returns TRUE (-1) or FALSE (0).
function file.Exists(filepath as string)
	file.Exists = boolean.false
	if _fileexists(filepath) then
		file.Exists = boolean.true
	else
		file.Exists = boolean.false
	end if
end function
' ----------------------------------------------------------------------------
' #### Deletes the specified file.
'____
' - @param {string} filepath The name of the file to be deleted. Wildcards * and ? can be used with caution.
sub file.Delete(filepath as string)
	if _fileexists(filepath) then
		kill filepath
	end if
end sub
' ----------------------------------------------------------------------------
' The OUTPUT file mode is used in an OPEN statement to send new data to files.\
' OUTPUT mode erases all previous data in an existing file or clears a port receive buffer.\
' Creates an empty file if the filename does not exist. Use OpenAppend if previous file data is to be preserved.\
' Mode can use PRINT (file statement), WRITE (file statement) or PRINT USING (file statement) to output file data.\
'___
' - @param {string} File to open
' - @return Returns The handle to the open file (LONG).
function file.OpenOutput(filepath as string)
	dim filehandle as long : filehandle = freefile : open filepath for output as #filehandle
	file.OpenOutput = filehandle
end function
' ----------------------------------------------------------------------------
' #### The INPUT file mode in an OPEN statement opens an existing file for INPUT (file statement).
'___
' - @param {string} File to open
' - @return Returns The handle to the open file (LONG).
function file.OpenInput(filepath as string)
	dim filehandle as long : filehandle = freefile : open filepath for input as #filehandle
	file.OpenInput = filehandle
end function
' ----------------------------------------------------------------------------
' #### OpenAppend is used in an output type OPEN statement to add data to the end of a file.
' ___
' - @param {string} filePath File to open
' - @return Returns The handle to the open file (LONG).
function file.OpenAppend(filepath as string)
	dim filehandle as long : filehandle = freefile : open filepath for append as #filehandle
	file.OpenAppend = filehandle
end function
' ----------------------------------------------------------------------------
' #### OpenRandom is used in an OPEN statement to read(GET) from or write(PUT) to a file.
' ___
' - @param {string} filePath File to open
' - @return Returns The handle to the open file (LONG).
function file.OpenRandom(filepath as string)
	dim filehandle as integer : filehandle = freefile : open filepath for random as #filehandle
	file.OpenRandom = filehandle
end function
' ----------------------------------------------------------------------------
' #### CLOSE closes an open file or port using the number assigned in an `OPEN` statement.
'___
' - @param {integer} fileHandle Indicates the file or list of file numbers to close. When not specified, all open files are closed.
function file.Close(filehandle as integer)
	close filehandle
	file.Close = boolean.true
end function
' ----------------------------------------------------------------------------
' Closes all open files.
sub file.CloseAll
	dim currentfile as integer
	dim lastfile as long : lastfile = freefile - 1
	for currentfile = 1 to lastfile
		close currentfile
	next
end sub
' ----------------------------------------------------------------------------
' #### Retuns the file size in bytes
'___
' - @param {string} filePath File to check
' - @returns {long} The size of the file.  Returns -1 if the file is not found
function file.GetSize&(filepath as string)
	if not _fileexists(filepath) then
		file.GetSize& = -1
		exit function
	end if
	
	dim filehandle as integer : filehandle = file.OpenAppend(filepath)
	file.GetSize& = lof(filehandle)
	close #filehandle
end function
' ----------------------------------------------------------------------------
' #### Set the creation timestame
' ##### This needs PowerShell installed
'___
' - @param {string} filePath File to check
' - @returns {string} dateTime Date and time - format mm/dd/yyyy HH:MM:SS (08/03/2017 17:00:00)
sub file.SetCreatedOn(filepath as string, dateTime as string)
	if not _fileexists(filepath) then
		error 53
	end if
	dim shellCommand as string : shellCommand = "pwsh -command " + chr$(34) + "(Get-Item '" + filepath + "').CreationTime = ('" + dateTime + "') " + chr$(34)
	shell _hide shellCommand
end sub
' ----------------------------------------------------------------------------
' #### Change the last write timestame
' ##### This needs PowerShell installed
'___
' - @param {string} filePath File to check
' - @param {string} dateTime Date and time - format mm/dd/yyyy HH:MM:SS (08/03/2017 17:00:00)
sub file.SetLastWrite(filepath as string, dateTime as string)
	if not _fileexists(filepath) then
		error 53
	end if
	dim shellCommand as string : shellCommand = "pwsh -command " + chr$(34) + "(Get-Item '" + filepath + "').LastWriteTime = ('" + dateTime + "') " + chr$(34)
	shell _hide shellCommand
end sub
' ----------------------------------------------------------------------------
' #### Set both the createdon and the last write timestamp of a file.
' ##### This needs PowerShell installed
'___
' - @param {string} filePath File to check
' - @param {string} dateTime Date and time - format mm/dd/yyyy HH:MM:SS (08/03/2017 17:00:00)
sub file.SetCreatedOnAndLastWrite(filepath as string, dateTime as string)
	call file.SetCreatedOn(filepath, dateTime)
	call file.SetLastWrite(filepath, dateTime)
end sub
' ----------------------------------------------------------------------------

' Use this for getting the createdon / lastwrite / lastaccess
' https://www.winhelponline.com/blog/change-accessed-modified-created-file-date-timestamp-windows/

$end if

